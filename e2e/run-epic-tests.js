#!/usr/bin/env node

const { execSync } = require('child_process');
const path = require('path');

console.log('üéØ Lancement des tests visuels personnalis√©s - Event Photo Platform');
console.log('üìã Bas√© sur les User Stories - √âpiques 1-8 et 10\n');

// Configuration des tests par √©pique
const epicTests = {
  'epic1': {
    name: 'Authentification et Gestion des Comptes',
    tests: ['US-001', 'US-002', 'US-003'],
    pattern: 'Epic 1: Authentification'
  },
  'epic2': {
    name: 'Recherche et D√©couverte d\'√âv√©nements',
    tests: ['US-004', 'US-005'],
    pattern: 'Epic 2: Recherche'
  },
  'epic3': {
    name: 'Reconnaissance Faciale et Scan',
    tests: ['US-006', 'US-007'],
    pattern: 'Epic 3: Reconnaissance Faciale'
  },
  'epic4': {
    name: 'Achat et Paiement',
    tests: ['US-008', 'US-009', 'US-010'],
    pattern: 'Epic 4: Achat et Paiement'
  },
  'epic5': {
    name: 'Gestion d\'√âv√©nements (Organisateur)',
    tests: ['US-011', 'US-012', 'US-013', 'US-014'],
    pattern: 'Epic 5: Gestion'
  },
  'epic6': {
    name: 'Administration et Mod√©ration',
    tests: ['US-015', 'US-016', 'US-017', 'US-018'],
    pattern: 'Epic 6: Administration'
  },
  'epic7': {
    name: 'Statistiques et Rapports',
    tests: ['US-019', 'US-020'],
    pattern: 'Epic 7: Statistiques'
  },
  'epic8': {
    name: 'Gestion Financi√®re',
    tests: ['US-021', 'US-022'],
    pattern: 'Epic 8: Gestion Financi√®re'
  },
  'epic10': {
    name: 'Exp√©rience Mobile et Accessibilit√©',
    tests: ['US-025', 'US-026'],
    pattern: 'Epic 10: Mobile'
  }
};

// Fonction pour ex√©cuter les tests d'une √©pique sp√©cifique
function runEpicTests(epicKey) {
  const epic = epicTests[epicKey];
  if (!epic) {
    console.error(`‚ùå √âpique '${epicKey}' non trouv√©e`);
    return;
  }

  console.log(`\nüöÄ Ex√©cution des tests pour l'√©pique: ${epic.name}`);
  console.log(`üìù User Stories: ${epic.tests.join(', ')}`);
  
  try {
    const command = `npm run test:visual -- --testNamePattern="${epic.pattern}"`;
    console.log(`‚ö° Commande: ${command}\n`);
    
    execSync(command, { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    console.log(`‚úÖ Tests de l'√©pique ${epicKey} termin√©s avec succ√®s\n`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution des tests pour l'√©pique ${epicKey}:`, error.message);
  }
}

// Fonction pour ex√©cuter tous les tests
function runAllTests() {
  console.log('üîÑ Ex√©cution de tous les tests visuels personnalis√©s\n');
  
  try {
    const command = 'npm run test:visual';
    console.log(`‚ö° Commande: ${command}\n`);
    
    execSync(command, { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    console.log('‚úÖ Tous les tests visuels termin√©s avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests:', error.message);
  }
}

// Fonction pour ex√©cuter les tests responsifs uniquement
function runResponsiveTests() {
  console.log('üì± Ex√©cution des tests responsifs (Epic 10)\n');
  
  try {
    const command = 'npm run test:visual -- --testNamePattern="Epic 10.*Mobile|Tests responsifs"';
    console.log(`‚ö° Commande: ${command}\n`);
    
    execSync(command, { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    console.log('‚úÖ Tests responsifs termin√©s avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests responsifs:', error.message);
  }
}

// Fonction pour ex√©cuter les tests d'accessibilit√© uniquement
function runAccessibilityTests() {
  console.log('‚ôø Ex√©cution des tests d\'accessibilit√©\n');
  
  try {
    const command = 'npm run test:visual -- --testNamePattern="Accessibilit√©"';
    console.log(`‚ö° Commande: ${command}\n`);
    
    execSync(command, { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    console.log('‚úÖ Tests d\'accessibilit√© termin√©s avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution des tests d\'accessibilit√©:', error.message);
  }
}

// Fonction pour afficher l'aide
function showHelp() {
  console.log('üìñ Aide - Script de tests visuels Event Photo Platform\n');
  
  console.log('Usage:');
  console.log('  node run-epic-tests.js [commande] [options]\n');
  
  console.log('Commandes disponibles:');
  console.log('  all              Ex√©cuter tous les tests visuels');
  console.log('  responsive       Ex√©cuter uniquement les tests responsifs');
  console.log('  accessibility    Ex√©cuter uniquement les tests d\'accessibilit√©');
  console.log('  epic<N>          Ex√©cuter les tests d\'une √©pique sp√©cifique (ex: epic1, epic2, etc.)');
  console.log('  help             Afficher cette aide\n');
  
  console.log('√âpiques disponibles:');
  Object.entries(epicTests).forEach(([key, epic]) => {
    console.log(`  ${key.padEnd(8)} ${epic.name} (${epic.tests.join(', ')})`);
  });
  
  console.log('\nExemples:');
  console.log('  node run-epic-tests.js epic1        # Tests d\'authentification');
  console.log('  node run-epic-tests.js epic10       # Tests mobile et accessibilit√©');
  console.log('  node run-epic-tests.js all          # Tous les tests');
  console.log('  node run-epic-tests.js responsive   # Tests responsifs uniquement');
}

// Fonction pour g√©n√©rer un rapport des tests
function generateTestReport() {
  console.log('üìä G√©n√©ration du rapport de tests\n');
  
  const screenshotsDir = path.join(process.cwd(), 'e2e', 'screenshots');
  
  try {
    const fs = require('fs');
    const files = fs.readdirSync(screenshotsDir);
    
    console.log(`üì∏ ${files.length} captures d'√©cran g√©n√©r√©es:`);
    
    Object.entries(epicTests).forEach(([epicKey, epic]) => {
      const epicFiles = files.filter(file => file.includes(epicKey));
      if (epicFiles.length > 0) {
        console.log(`\n${epic.name}:`);
        epicFiles.forEach(file => console.log(`  ‚úì ${file}`));
      }
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du rapport:', error.message);
  }
}

// Parser les arguments de ligne de commande
const args = process.argv.slice(2);
const command = args[0] || 'help';

console.log(`Event Photo Platform - Tests Visuels Personnalis√©s`);
console.log(`=================================================\n`);

switch (command) {
  case 'all':
    runAllTests();
    break;
    
  case 'responsive':
    runResponsiveTests();
    break;
    
  case 'accessibility':
    runAccessibilityTests();
    break;
    
  case 'report':
    generateTestReport();
    break;
    
  case 'help':
  case '--help':
  case '-h':
    showHelp();
    break;
    
  default:
    // V√©rifier si c'est une √©pique sp√©cifique
    if (command.startsWith('epic') && epicTests[command]) {
      runEpicTests(command);
    } else {
      console.error(`‚ùå Commande '${command}' non reconnue`);
      console.log('üí° Utilisez "help" pour voir les commandes disponibles\n');
      showHelp();
      process.exit(1);
    }
    break;
}

// Ajouter une option pour nettoyer les anciens screenshots
if (args.includes('--clean')) {
  console.log('üßπ Nettoyage des anciens screenshots...');
  try {
    const fs = require('fs');
    const screenshotsDir = path.join(process.cwd(), 'e2e', 'screenshots');
    const files = fs.readdirSync(screenshotsDir);
    
    files.forEach(file => {
      if (file.startsWith('epic') || file.startsWith('navigation-') || file.startsWith('page-')) {
        fs.unlinkSync(path.join(screenshotsDir, file));
        console.log(`üóëÔ∏è Supprim√©: ${file}`);
      }
    });
    
    console.log('‚úÖ Nettoyage termin√©\n');
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error.message);
  }
}